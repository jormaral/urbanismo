<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:s="http://jboss.com/products/seam/taglib"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:ice="http://www.icesoft.com/icefaces/component"
	template="../../layout/template.xhtml">

	<ui:define name="head">

		<link rel="stylesheet" type="text/css"
			href="../../ejemplo/Ext/resources/css/ext-all.css"></link>
		<script type="text/javascript"
			src="../../ejemplo/Ext/adapter/ext/ext-base.js"></script>
		<script type="text/javascript"
			src="../../ejemplo/Ext/ext-all-debug.js"></script>

		<script src="/fipeditor/scripts/ol211/lib/OpenLayers.js"></script> 
		<script src="../../ejemplo/lib/GeoExt.js"></script>
		<script
			src="http://urbanismoenred.idom.com/geoserver/pdf/info.json?var=printCapabilities"></script>



	</ui:define>

	<ui:define name="breadcrumb">

		<!--  Se define el breadcrumb -->

		<ice:panelGroup styleClass="breadcrumbTexto">
			<s:link style="color:blue;" view="/home.xhtml" id="HomeRutaMenu" propagation="none" value="#{messages.menu_inicio}">

				

			</s:link>

			<ice:outputLabel styleClass="simboloMayor" value=" > " />

			<s:link view="/informacionfip/InformacionFipNavegacion.xhtml"
				id="InformacionFipRutaMenu" propagation="none" value="#{messages.menu_informacionfip}" style="color:blue;">
			
			</s:link>

			<ice:outputLabel styleClass="simboloMayor" value=" > " />

			<s:link view="/informacionfip/imprimirseriemapas/ImprimirMapa.xhtml"
				id="VerMapasRutaMenu" propagation="none" style="color:blue;" value="#{messages.menu_imprimirseriemapa}">
				
			</s:link>


		</ice:panelGroup>



	</ui:define>
	<ui:define name="body">

		<br/>
		<div style="width: 100%; height: 700px" id="content"></div>



		<script type="text/javascript">

		/**
		 * Copyright (c) 2008-2009 The Open Source Geospatial Foundation
		 * 
		 * Published under the BSD license.
		 * See http://svn.geoext.org/core/trunk/geoext/license.txt for the full text
		 * of the license.
		 */

		 /** api: example[tree-legend]
		  *  Tree Legend
		  *  -----------
		  *  Render layer nodes with legends.
		  */

		// custom layer node UI class
		var LayerNodeUI = Ext.extend(
		    GeoExt.tree.LayerNodeUI,
		    new GeoExt.tree.TreeNodeUIEventMixin()
		);

		Ext.onReady(function() {
		    var mapPanel = new GeoExt.MapPanel({
		        region: "center",
		        center: [146.1569825, -41.6109735],
		        zoom: 6,
		        layers: [
		            new OpenLayers.Layer.WMS("Tasmania State Boundaries",
		                "http://demo.opengeo.org/geoserver/wms", {
		                    layers: "topp:tasmania_state_boundaries"
		                }, {
		                    buffer: 0,
		                    // exclude this layer from layer container nodes
		                    displayInLayerSwitcher: false
		               }),
		            new OpenLayers.Layer.WMS("Water",
		                "http://demo.opengeo.org/geoserver/wms", {
		                    layers: "topp:tasmania_water_bodies",
		                    transparent: true,
		                    format: "image/gif"
		                }, {
		                    buffer: 0
		                }),
		            new OpenLayers.Layer.WMS("Cities",
		                "http://demo.opengeo.org/geoserver/wms", {
		                    layers: "topp:tasmania_cities",
		                    transparent: true,
		                    format: "image/gif"
		                }, {
		                    buffer: 0
		                }),
		            new OpenLayers.Layer.WMS("Tasmania Roads",
		                "http://demo.opengeo.org/geoserver/wms", {
		                    layers: "topp:tasmania_roads",
		                    transparent: true,
		                    format: "image/gif"
		                }, {
		                    buffer: 0
		                })
		        ]
		    });

		    var tree = new Ext.tree.TreePanel({
		        region: "east",
		        title: "Layers",
		        width: 250,
		        autoScroll: true,
		        enableDD: true,
		        // apply the tree node component plugin to layer nodes
		        plugins: [{
		            ptype: "gx_treenodecomponent"
		        }],
		        loader: {
		            applyLoader: false,
		            uiProviders: {
		                "custom_ui": LayerNodeUI
		            }
		        },
		        root: {
		            nodeType: "gx_layercontainer",
		            loader: {
		                baseAttrs: {
		                    uiProvider: "custom_ui"
		                },
		                createNode: function(attr) {
		                    // add a WMS legend to each node created
		                    attr.component = {
		                        xtype: "gx_wmslegend",
		                        layerRecord: mapPanel.layers.getByLayer(attr.layer),
		                        showTitle: false,
		                        // custom class for css positioning
		                        // see tree-legend.html
		                        cls: "legend"
		                    }
		                    return GeoExt.tree.LayerLoader.prototype.createNode.call(this, attr);
		                }
		            }
		        },
		        rootVisible: false,
		        lines: false
		    });

		    new Ext.Viewport({
		        layout: "fit",
		        hideBorders: true,
		        items: {
		            layout: "border",
		            items: [
		                mapPanel, tree, {
		                    contentEl: "ssss",
		                    region: "west",
		                    width: 250,
		                    bodyStyle: {padding: "5px"}
		                }
		            ]
		        }
		    });
		});
		
		</script>







	</ui:define>

</ui:composition>
